<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.2.4.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.example</groupId>
	<artifactId>my-log</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>my-log</name>
	<description>Demo project for Spring Boot</description>

	<properties>
		<java.version>1.8</java.version>
		<spring-cloud.version>Hoxton.SR1</spring-cloud.version>
		<dockerfile-maven-plugin.version>1.4.13</dockerfile-maven-plugin.version>
		<my.docker.image.prefix>tzolov</my.docker.image.prefix>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream-binder-kafka</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<groupId>org.junit.vintage</groupId>
					<artifactId>junit-vintage-engine</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-stream-test-support</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>

			<!--
				Custom Maven Plugin that converts the entire Spring Boot Configuration Metadata Json into
				a single property with name set by the encodedPropertyName tag and value Base64 encoded content of
				the Metadata Json file.
			-->
			<plugin>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-configuration-metadata-encoder</artifactId>
				<version>0.0.2.BUILD-SNAPSHOT</version>
				<configuration>
					<metadataFile>${project.build.outputDirectory}/META-INF/spring-configuration-metadata.json</metadataFile>
					<encodedMetadataFile>${project.build.outputDirectory}/META-INF/spring-configuration-metadata-encoded.properties</encodedMetadataFile>
					<encodedPropertyName>spring.configuration.metadata.encoded</encodedPropertyName>
				</configuration>
				<executions>
					<execution>
						<id>encode-metadata</id>
						<phase>process-classes</phase>
						<goals>
							<goal>encode</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!--
				Option 1: Use Dockerfile template, maven-resources-plugin and com.spotify:dockerfile-maven-plugin
				Use: Image automatically built in the package phase. To build manually run: ./mvnw clean install dockerfile:build
			-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<executions>
					<execution>
						<id>copy-dockerfile-template</id>
						<phase>process-classes</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<encoding>UTF-8</encoding>
							<outputDirectory>${project.build.outputDirectory}/META-INF/</outputDirectory>
							<filters>
								<filter>
									${project.build.outputDirectory}/META-INF/spring-configuration-metadata-encoded.properties
								</filter>
							</filters>
							<resources>
								<resource>
									<directory>${basedir}/src/main/resources/templates</directory>
									<includes>
										<include>**/Dockerfile</include>
									</includes>
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>com.spotify</groupId>
				<artifactId>dockerfile-maven-plugin</artifactId>
				<version>${dockerfile-maven-plugin.version}</version>
				<configuration>
					<repository>${my.docker.image.prefix}/${project.artifactId}</repository>
					<buildArgs>
						<JAR_FILE>${project.build.finalName}.jar</JAR_FILE>
					</buildArgs>
					<tag>${project.version}</tag>
					<dockerfile>${project.build.outputDirectory}/META-INF/Dockerfile</dockerfile>
				</configuration>
				<executions>
					<execution>
						<id>build-tag-image</id>
						<phase>package</phase>
						<goals>
							<goal>build</goal>
							<goal>tag</goal>
						</goals>
					</execution>
				</executions>
			</plugin>


			<!--
				Option 2:  Use of properties-maven-plugin and jib-maven-plugin
				Use: Use: ./mvnw clean install jib:dockerBuild or ./mvnw clean install jib:build
			-->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>properties-maven-plugin</artifactId>
				<version>1.0.0</version>
				<executions>
					<execution>
						<phase>process-classes</phase>
						<goals>
							<goal>read-project-properties</goal>
						</goals>
						<configuration>
							<files>
								<file>
									${project.build.outputDirectory}/META-INF/spring-configuration-metadata-encoded.properties
								</file>
							</files>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>com.google.cloud.tools</groupId>
				<artifactId>jib-maven-plugin</artifactId>
				<version>1.8.0</version>
				<configuration>
					<from>
						<image>springcloud/openjdk</image>
					</from>
					<to>
						<image>docker.io/${my.docker.image.prefix}/my-log-sink-o2</image>
						<tags>
							<tag>latest</tag>
						</tags>
					</to>
					<container>
						<useCurrentTimestamp>true</useCurrentTimestamp>
						<labels>
							<spring.configuration.metadata>${spring.configuration.metadata.encoded}
							</spring.configuration.metadata>
							<configuration-properties.classes>com.example.mylog.MyLogProperties
							</configuration-properties.classes>
							<configuration-properties.names>other.message</configuration-properties.names>
						</labels>
						<format>Docker</format><!-- Docker or OCI -->
					</container>
				</configuration>
			</plugin>

			<!--
			Option 3: properties-maven-plugin, assembly.xml and io.fabric8:docker-maven-plugin
			Use: ./mvnw clean install docker:build
			-->
			<plugin>
				<groupId>io.fabric8</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>0.31.0</version>
				<configuration>
					<images>
						<image>
							<name>${my.docker.image.prefix}/${project.artifactId}-o3</name>
							<build>
								<tags>
									<tag>${project.version}</tag>
								</tags>
								<from>springcloud/openjdk:latest</from>
								<volumes>
									<volume>/tmp</volume>
								</volumes>
								<env>
									<LANG>C.UTF-8</LANG>
								</env>
								<labels>
									<spring.configuration.metadata>${spring.configuration.metadata.encoded}
									</spring.configuration.metadata>
								</labels>
								<entryPoint>
									<exec>
										<arg>java</arg>
										<arg>-jar</arg>
										<arg>/maven/my-log-sink.jar</arg>
									</exec>
								</entryPoint>
								<assembly>
									<name>maven</name>
									<descriptor>assembly.xml</descriptor>
									<targetDir>/</targetDir>
								</assembly>
							</build>
						</image>
					</images>
				</configuration>
			</plugin>

		</plugins>
	</build>

</project>
